// components/FileExporter.tsx
"use client";

import React, { useState } from "react";
import { SchemaElement, SplitPoint, SchemaFile } from "./types";

interface FileExporterProps {
  elements: SchemaElement[];
  splitPoints: SplitPoint[];
}

export function FileExporter({ elements, splitPoints }: FileExporterProps) {
  const [exportFormat, setExportFormat] = useState<"multiple" | "single">(
    "multiple"
  );

  const generateSchemaFiles = (): SchemaFile[] => {
    if (exportFormat === "single") {
      return [
        {
          fileName: "schema",
          elements: elements,
          imports: [],
        },
      ];
    }

    // Group elements by split points
    const files: SchemaFile[] = [];
    let currentFile: SchemaElement[] = [];
    let currentFileName = "schema";
    let fileIndex = 0;

    elements.forEach((element, index) => {
      currentFile.push(element);

      // Check if there's a split point after this element
      const splitAfter = splitPoints.find((sp) => sp.afterIndex === index);
      if (splitAfter) {
        files.push({
          fileName: currentFileName,
          elements: currentFile,
          imports: [],
        });
        currentFile = [];
        currentFileName = splitAfter.fileName || `schema${++fileIndex}`;
      }
    });

    // Add the last file
    if (currentFile.length > 0) {
      files.push({
        fileName: currentFileName,
        elements: currentFile,
        imports: [],
      });
    }

    return files;
  };

  const downloadFile = (content: string, fileName: string) => {
    const blob = new Blob([content], { type: "text/plain" });
    const url = URL.createObjectURL(blob);
    const a = document.createElement("a");
    a.href = url;
    a.download = fileName;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  const generateFileContent = (file: SchemaFile): string => {
    let content = "// Generated by Prisma Schema Organizer\n\n";

    // Add generator and datasource only to main schema file
    if (file.fileName === "schema") {
      content += `generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

`;
    }

    // Add imports if this file references others
    if (file.imports.length > 0) {
      file.imports.forEach((importName) => {
        content += `import { ${importName} } from './${importName}.prisma'\n`;
      });
      content += "\n";
    }

    // Add elements
    file.elements.forEach((element) => {
      content += element.content + "\n\n";
    });

    return content.trim();
  };

  const handleExport = () => {
    const files = generateSchemaFiles();

    if (exportFormat === "single") {
      const content = generateFileContent(files[0]);
      downloadFile(content, "schema.prisma");
    } else {
      files.forEach((file) => {
        const content = generateFileContent(file);
        const fileName =
          file.fileName === "schema"
            ? "schema.prisma"
            : `${file.fileName}.prisma`;
        downloadFile(content, fileName);
      });
    }

    alert(`Exported ${files.length} file(s) successfully!`);
  };

  const handlePreview = () => {
    const files = generateSchemaFiles();
    const preview = files
      .map((file) => {
        const content = generateFileContent(file);
        const fileName =
          file.fileName === "schema"
            ? "schema.prisma"
            : `${file.fileName}.prisma`;
        return `=== ${fileName} ===\n${content}\n\n`;
      })
      .join("");

    // Open preview in new window
    const previewWindow = window.open("", "_blank");
    if (previewWindow) {
      previewWindow.document.write(`
        <html>
          <head><title>Schema Preview</title></head>
          <body>
            <pre style="font-family: monospace; white-space: pre-wrap;">${preview}</pre>
          </body>
        </html>
      `);
    }
  };

  return (
    <div className=" p-4 rounded-lg shadow-sm border space-y-4">
      <h3 className="font-semibold">Export Schema</h3>

      <div className="space-y-3">
        <div>
          <label className="block text-sm font-medium  mb-2">
            Export Format:
          </label>
          <div className="flex space-x-4">
            <label className="flex items-center">
              <input
                type="radio"
                value="multiple"
                checked={exportFormat === "multiple"}
                onChange={(e) =>
                  setExportFormat(e.target.value as "multiple" | "single")
                }
                className="mr-2"
              />
              Multiple Files
            </label>
            <label className="flex items-center">
              <input
                type="radio"
                value="single"
                checked={exportFormat === "single"}
                onChange={(e) =>
                  setExportFormat(e.target.value as "multiple" | "single")
                }
                className="mr-2"
              />
              Single File
            </label>
          </div>
        </div>

        <div className="flex space-x-2">
          <button
            onClick={handlePreview}
            className="flex-1 px-4 py-2   rounded  transition-colors"
            disabled={elements.length === 0}
          >
            Preview
          </button>

          <button
            onClick={handleExport}
            className="flex-1 px-4 py-2 bg-green-500  rounded hover:bg-green-600 transition-colors"
            disabled={elements.length === 0}
          >
            Export
          </button>
        </div>

        {elements.length > 0 && (
          <div className="text-xs ">
            {exportFormat === "multiple"
              ? `Will create ${generateSchemaFiles().length} file(s)`
              : "Will create single schema.prisma file"}
          </div>
        )}
      </div>
    </div>
  );
}
